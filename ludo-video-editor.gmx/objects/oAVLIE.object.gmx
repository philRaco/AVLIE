<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>plh_important</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Explanation

/*
Welcome to AVLIE!
This is ⠀　⠀⠀　⠀　　⠀ ⠀⠀⠀⠀　⠀ ⠀　⠀⠀'s event system.
It can let you do ANYTHING from moving the camera,
to letting NPCs talk to each other,
to controlling behaviours of certain objects...

as long as oEvent is updated with those functions!


here's how you do it:

1. Setup
    You will need to open the following folders in the resource tree:
    - Scripts &gt; event &gt; run_instructions()
        -&gt; run_instructions() is the main script that determines what instruction to do!
    - Scripts &gt; event &gt; actions &gt; event_instructions
        -&gt; This is the folder where your instructions will go.
    - Objects &gt; EVENTS
        -&gt; AVLIE uses children of oEvent.
        -&gt; The children contain instructions in the create event, read more in oEvent.
    - Objects &gt; oEvent
        -&gt; ...you already have it open

*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///event

sprite_index = plh_important; // well i guess i cant delete this sprite anymore

//event [ X ,  ]
current_event = 0;
can_continue_event = true;
queue_event = false;
event_to = current_event;

//event [  , X ]
instruction = 0;
e = instruction;
// number which holds what instruction to run until its met
max_loop_lock = 65535;
instruction_loop_lock = max_loop_lock;
instruction_fulfilled = flase;
wait_for_instruction_fulfilled = false;

for (var i = 0; i &lt; 10; ++i){
    timer[i] = 0;
    spawns[i] = noone; //specifically one that are targettable
    for_finding[i] = noone;
    placeholder[i] = 0;
}

b_holder_left = noone;
b_holder_right = noone;

current_main_timer = 0;
textbox_exists = flase;
advance_by_event = true;

/*
uhhh i need code to tell the thing what entries exist

cause right now its set up so that there's entries

0, 1, 2, 3, 7,  8, 9,...

so i think what i will do is cahnge the array to

actions[c, i] = event.among_us!
action_value[c, i] = false;

so a fake 3d array lmfao

*/

to_draw_test_c = 0;
to_draw_test_i = 0;
to_draw_curr_i = 0;

frame_delay = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///event SPECIFIC

selected_spawn = 0;
expected_direction = 1;

one_frame_wait = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///misc

//visible = false; //enable for debugging
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///change event

if queue_event{
    wait_for_instruction_fulfilled = false;
    instruction_fulfilled = false;
    current_event++;
    if current_event &gt; (array_height_2d(actions) + 1){
        //event over
        print("E V E N T   O V E R")
        print("")
        print("")
        print("")
        instance_destroy();
    }
    print("E V E N T   C H A N G E");
    queue_event = false;
    can_continue_event = false;
    instruction_loop_lock = max_loop_lock;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///wait one frame

if one_frame_wait{
    print("frame waited till end step")
    allow_next_instruction();
    one_frame_wait = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug

to_draw_test_c = current_event;
to_draw_test_i = instruction;
//to_draw_curr_i = instruction_value();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>SET WAIT EVENTS HERE</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///do events! (less robust ig)

//based on instruction do different things... TO FIIIIIIIIIIIIIIIIIIIX
//whenever instruction fulfilled, add the var
//this is run in a for loop so that multiple instructions can happen on one frame!

//DONT FORGET TO ADD THE WAIT INSTRUCTION TO RUN_INSTRUCTIONS()

//did transferring into a script break it???

if wait_for_instruction_fulfilled{
    //check for user prompt
    var help = instruction;
    switch actions[current_event, instruction]{
        case event.wait_for_user_prompt:
            if action_event[current_event, instruction] != action.none{
                print_every_second("wait for input....", instruction_value_non_for_loop(help))
                if input_press(instruction_value_non_for_loop(help)){
                    print("event.dia_wait_for_user_prompt is over now! resuming to for loop now");
                    if advance_by_event{
                        next_event();
                    } else {
                        allow_next_instruction();
                    }
                }
            } else {
                ///ignore instruction if no button prompt is set
                allow_next_instruction();
            }
        break;
        case event.wait_one_frame:
            one_frame_wait = true;
        break;
        case event.wait_until_timer:
            if timer[current_main_timer] &lt; 0{
                print("timer over!")
                allow_next_instruction();
            } else {
                print_every_second("wait for timer end....",timer[current_main_timer]);
                timer[current_main_timer]--;
            }
        break;
    }
} else {
    //funky for loop
    for (e = instruction; e &lt; array_length_2d(actions,current_event); ++e){
        /*
        print("arraylen",array_length_2d(actions,current_event));
        print("")
        print("THIS IS THE ISNTRUCTION")
        print(instruction)
        print(e)
        print("     OF EVENT")
        print("     " + string(current_event))
        */
        //uhhh yes
        // if e = event blah blah..
        // if instruction = blah blah i guess makes more sense????
        if instruction_loop_lock != e{
            run_instructions(e);
        }
    }
}

if can_continue_event{
    wait_for_instruction_fulfilled = false;
    instruction_fulfilled = false;

    restart_instruction();
    e = 0;
    queue_event = true;
    can_continue_event = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///THE POWER OF ADLIE!!!!!!

draw_sprite_ext(sprite_index,-1,x,y,1,1,0,c_white,0.7);

set_draw_reset();
draw_set_colour(c_white);

draw_text(view_xview[0]+16,view_yview[0]+16,to_draw_test_c);
draw_text(view_xview[0]+16,view_yview[0]+48,to_draw_test_i);
//draw_text(view_xview[0]+48,view_yview[0]+48,to_draw_curr_i);

set_draw_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
